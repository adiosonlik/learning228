–í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–∞ Python:

---

### **1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Bubble Sort)**
```python
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

print(bubble_sort([5, 3, 8, 4, 2]))
```

---

### **2. –ü–æ–∏—Å–∫ (–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫)**
```python
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

print(binary_search([1, 3, 5, 7, 9], 5))  # –í—ã–≤–æ–¥: 2
```

---

### **3. –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –æ–±—â–µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª—è (–∞–ª–≥–æ—Ä–∏—Ç–º –ï–≤–∫–ª–∏–¥–∞)**
```python
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

print(gcd(48, 18))  # –í—ã–≤–æ–¥: 6
```

---

### **4. –ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ (—Ä–µ–∫—É—Ä—Å–∏—è)**
```python
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)

print(fibonacci(7))  # –í—ã–≤–æ–¥: 13
```

---

### **5. –ë—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å**
```python
def power(x, y):
    if y == 0:
        return 1
    half = power(x, y // 2)
    return half * half if y % 2 == 0 else half * half * x

print(power(2, 10))  # –í—ã–≤–æ–¥: 1024
```

---

### **6. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ (DFS)**
```python
def dfs(graph, node, visited=None):
    if visited is None:
        visited = set()
    visited.add(node)
    print(node, end=" ")
    for neighbor in graph.get(node, []):
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

graph = {
    1: [2, 3],
    2: [4, 5],
    3: [6],
    4: [],
    5: [],
    6: []
}
dfs(graph, 1)  # –í—ã–≤–æ–¥: 1 2 4 5 3 6
```

---

### **7. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ (BFS)**
```python
from collections import deque

def bfs(graph, start):
    visited = set()
    queue = deque([start])
    while queue:
        node = queue.popleft()
        if node not in visited:
            print(node, end=" ")
            visited.add(node)
            queue.extend(graph.get(node, []))

bfs(graph, 1)  # –í—ã–≤–æ–¥: 1 2 3 4 5 6
```

---

### **8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É (–º–µ—Ç–æ–¥ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è)**
```python
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

print(is_prime(29))  # –í—ã–≤–æ–¥: True
```

---

### **9. –ñ–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (—Ä–∞–∑–º–µ–Ω –º–æ–Ω–µ—Ç)**
```python
def coin_change(coins, amount):
    coins.sort(reverse=True)
    count = 0
    for coin in coins:
        while amount >= coin:
            amount -= coin
            count += 1
    return count if amount == 0 else -1

print(coin_change([1, 5, 10, 25], 63))  # –í—ã–≤–æ–¥: 6 (25+25+10+1+1+1)
```

---

### **10. –ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã (–ø–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏)**
```python
import heapq

def dijkstra(graph, start):
    heap = [(0, start)]
    shortest = {node: float('inf') for node in graph}
    shortest[start] = 0

    while heap:
        (cost, node) = heapq.heappop(heap)
        for neighbor, weight in graph[node]:
            new_cost = cost + weight
            if new_cost < shortest[neighbor]:
                shortest[neighbor] = new_cost
                heapq.heappush(heap, (new_cost, neighbor))
    
    return shortest

graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('C', 2), ('D', 5)],
    'C': [('D', 1)],
    'D': []
}
print(dijkstra(graph, 'A'))  # –í—ã–≤–æ–¥: {'A': 0, 'B': 1, 'C': 3, 'D': 4}
```

---

–≠—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –ø–æ–∏—Å–∫, —Ä–∞–±–æ—Ç—É —Å –≥—Ä–∞—Ñ–∞–º–∏, –∂–∞–¥–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –µ—â–µ, —Å–ø—Ä–∞—à–∏–≤–∞–π! üöÄ
